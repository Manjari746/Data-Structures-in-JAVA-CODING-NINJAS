*
 * Binary Tree Node class
 * 
 * class BinaryTreeNode<T> { 
 * 		T data; 
 * 		BinaryTreeNode<T> left; 
 * 		BinaryTreeNode<T> right;
 * 		public BinaryTreeNode(T data) 
 * 		{ 
 * 			this.data = data; 
 * 		}
 * }
 */

 /* 
 * Main Method being used internally
 *	public static void main(String[] args) throws IOException {
 *		BinarySearchTree bst = new BinarySearchTree();
 *		int choice, input;
 *		int q = Integer.parseInt(br.readLine());
 *		while (q-- > 0) {
 *			st = new StringTokenizer(br.readLine());
 *			choice = Integer.parseInt(st.nextToken());
 *			switch (choice) {
 *			case 1:
 *				input = Integer.parseInt(st.nextToken());
 *				bst.insert(input);
 *				break;
 *				case 2:
 *				input = Integer.parseInt(st.nextToken());
 *				bst.remove(input);
 *				break;
 *			case 3:
 *				input = Integer.parseInt(st.nextToken());
 *				System.out.println(bst.search(input));
 *				break;
 *			default:
 *				bst.printTree();
 *				break;
 *			}
 *		}
 *	}
 */

/*
 * Binary Tree Node class
 * 
 * class BinaryTreeNode<T> { 
 * 		T data; 
 * 		BinaryTreeNode<T> left; 
 * 		BinaryTreeNode<T> right;
 * 		public BinaryTreeNode(T data) 
 * 		{ 
 * 			this.data = data; 
 * 		}
 * }
 */

 /* 
 * Main Method being used internally
 *	public static void main(String[] args) throws IOException {
 *		BinarySearchTree bst = new BinarySearchTree();
 *		int choice, input;
 *		int q = Integer.parseInt(br.readLine());
 *		while (q-- > 0) {
 *			st = new StringTokenizer(br.readLine());
 *			choice = Integer.parseInt(st.nextToken());
 *			switch (choice) {
 *			case 1:
 *				input = Integer.parseInt(st.nextToken());
 *				bst.insert(input);
 *				break;
 *				case 2:
 *				input = Integer.parseInt(st.nextToken());
 *				bst.remove(input);
 *				break;
 *			case 3:
 *				input = Integer.parseInt(st.nextToken());
 *				System.out.println(bst.search(input));
 *				break;
 *			default:
 *				bst.printTree();
 *				break;
 *			}
 *		}
 *	}
 */

public class BinarySearchTree {
    private BinaryTreeNode<Integer> root;
    
	public void insert(int data) {
	 root = insert(root, data); 
    }
 
  private static  BinaryTreeNode<Integer> insert(BinaryTreeNode<Integer> root, int data)   {
 
        if (root == null) {
            root = new BinaryTreeNode<Integer>(data);
            return root;
        }
 
        if (data <= root.data)
            root.left = insert(root.left, data);
        else if (data > root.data)
            root.right = insert(root.right, data);
 
        return root;
    }
 
    
	
	
	public void remove(int data) {
   root = delete(root, data); 
    }
 
    private static BinaryTreeNode<Integer> delete(BinaryTreeNode<Integer> root, int data) {
        
        if (root == null)
            return root;
 
        if (data < root.data)
            root.left = delete(root.left, data);
        else if (data > root.data)
            root.right = delete(root.right, data);
 
        else {
            // node with only one child or no child
            if (root.left == null)
                return root.right;
            else if (root.right == null)
                return root.left;
 
            // node with two children: Get the inorder
            // successor (smallest in the right subtree)
            root.data = minValue(root.right);
 
            // Delete the inorder successor
            root.right = delete(root.right, root.data);
        }
 
        return root;
    }
 
  private static  int minValue(BinaryTreeNode<Integer> root)
    {
        int minv = root.data;
        while (root.left != null)
        {
            minv = root.left.data;
            root = root.left;
        }
        return minv;
    }
    
	
	
	public void printTree() {
		//Implement the printTree() function
        printTreeHelper(root);
        return;
		//Implement the printTree() function
	}
  private static void printTreeHelper(BinaryTreeNode<Integer> node){
           if(node == null){
            return;
        }
        System.out.print(node.data+":");
        if(node.left != null){
            System.out.print("L:"+node.left.data+",");
            }
        if(node.right != null){
            System.out.println("R:"+node.right.data);
            }else
        System.out.println();

        printTreeHelper(node.left);
        printTreeHelper(node.right);

    }
        
        
	
	
	public boolean search(int data) {
		return search(root,data);
	}
    private static  boolean search(BinaryTreeNode<Integer> root,int data){
        if(root==null)
            return false;
        if(root.data==data)
            return true;
        else if(root.data>data)
            return search(root.left,data);
        else
            return search(root.right,data);
	}
}
