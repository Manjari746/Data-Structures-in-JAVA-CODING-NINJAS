
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Queue;
public class Solution {
	/*
	 * BinaryTreeNode<Integer> class
	 * 
	 * class BinaryTreeNode<Integer><T> 
	 * { 
	 * 		T data; 
	 * 		BinaryTreeNode<Integer><T> left; 
	 * 		BinaryTreeNode<Integer><T> right;
	 *		public BinaryTreeNode<Integer>(T data) 
	 *		{
	 *  		this.data = data; 
	 *  	} 
	 *  }
	 */
	/*
	 * LinkedListNode Class
	 * class LinkedListNode<T> 
	 * { 
	 * 		T data; 
	 * 		LinkedListNode<T> next;
	 * 		public LinkedListNode(T data) 	
	 * 		{
	 *  		this.data = data; 
	 *  	} 
	 *  }
	 */
	public static ArrayList<LinkedListNode<Integer>> constructLinkedListForEachLevel(BinaryTreeNode<Integer> root){
		ArrayList<LinkedListNode<Integer>> ans = new ArrayList<>();
                    if(root == null)
                       return ans;   

       Queue<BinaryTreeNode<Integer>> q = new LinkedList<>();
            q.add(root);
while(!q.isEmpty()){
int size = q.size();
LinkedListNode<Integer> tail = null;
LinkedListNode<Integer> head = null;
while(size-->0){											
BinaryTreeNode<Integer> temp = q.poll();
if(temp.left != null)
q.add(temp.left);
 if(temp.right != null)
q.add(temp.right);
if(head == null){
LinkedListNode<Integer> newNode = new LinkedListNode<>(temp.data);
tail=newNode;
head = newNode;
}

else{
LinkedListNode<Integer> newNode = new LinkedListNode<>(temp.data);
tail.next=newNode;
tail=tail.next;
}
}
ans.add(head);
}
return ans;
}

}
	

