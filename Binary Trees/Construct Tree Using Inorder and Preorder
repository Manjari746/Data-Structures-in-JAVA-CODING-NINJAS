/*
	
	Following is the structure used to represent the Binary Tree Node

	class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}

*/



public class Solution {
    // function for finding length of array

	public static BinaryTreeNode<Integer> buildTree(int[] preOrder, int[] inOrder) {
	
        return buildTree(preOrder, 0, preOrder.length-1,  inOrder, 0, inOrder.length-1);

    }
    
    public static  BinaryTreeNode<Integer> buildTree(int[] preOrder, int preStart, int preEnd, int[] inOrder, int inStart, int inEnd){
        if(preStart > preEnd || inStart > inEnd )
            return null;
 
        int rootValue = preOrder[preStart];
      BinaryTreeNode<Integer> root = new BinaryTreeNode<Integer>(rootValue);
 
        int i=0;
        for( i=0; i< inOrder.length; i++){
            if(inOrder[i]==rootValue){
                break;
            }
        }
 
        root.left = buildTree(preOrder, preStart+1, preStart+1-inStart+i-1, inOrder, inStart, i-1 );
        root.right = buildTree(preOrder, preStart+1-inStart+i, preEnd, inOrder, i+1, inEnd);
 
        return root;
    }
}
