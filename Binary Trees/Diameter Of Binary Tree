// method 1


/*
	
	Following is the structure used to represent the Binary Tree Node

	class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}

*/

public class Solution {
  
	public static int diameterOfBinaryTree(BinaryTreeNode<Integer> root){
        if(root==null)
            return 0;
	     int left_height=height(root.left);
       int right_height=height(root.right);
        
        int h1= left_height+right_height+1; 
        int h2=diameterOfBinaryTree(root.left);
        int h3=diameterOfBinaryTree(root.right);
        
        
        return max(h1,h2,h3);
        
	}





    public static int height(BinaryTreeNode<Integer> root) {
        if (root == null)
            return 0;

        return 1 + Math.max(height(root.left), height(root.right));
    }





    public static int max(int a, int b, int c) {
        if (a > b && a > c)
            return a;
        else if (b > a && b > c)
            return b;
        else
            return c;
    }
	
}









//method2 



/*
	
	Following is the structure used to represent the Binary Tree Node

	class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}

*/
class Pair{
	int height;
	int diameter;

	public Pair(int h, int d){
		height=h;
		diameter=d;
	}
}

public class Solution {

	public static int diameterOfBinaryTree(BinaryTreeNode<Integer> root){
	Pair p=f(root);
	return p.diameter;
	}

	public static Pair f( BinaryTreeNode<Integer>root){
		if(root==null)
		return new Pair(0, 0);


Pair p1=f(root.left);
Pair p2=f(root.right);


int l=p1.height+p2.height+1;
int d=Math.max(l, Math.max(p1.diameter, p2.diameter));
int h=1+Math.max(p1.height, p2.height);

return new Pair(h, d);

	}
	
}



