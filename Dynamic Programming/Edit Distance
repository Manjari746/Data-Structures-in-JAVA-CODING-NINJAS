
// using recursion 1


public class Solution {

	public static int editDistance(String s, String t) {

        if(s.length()==0)
            return t.length();
        if(t.length()==0)
            return s.length();


 // If last characters of two strings are same, Ignore first characters     
        if(s.charAt(0)==t.charAt(0))        
                return editDistance(s.substring(1),t.substring(1));     
 // 1.1st for insert 2.2nd function for removing 3. 3rd function ror replacing                                      
        return 1+Math.min(
                editDistance(s,t.substring(1)), Math.min(
                        editDistance(s.substring(1),t), editDistance(s.substring(1), t.substring(1))));
      
    }                                                                                                                      
}



//using recursion 2
public class Solution {

	public static int editDistance(String s, String t) {
		int m=s.length();
        int n=t.length();
        return f(s,t,m,n);
    }
    
    public static int f(String s,String t,int m,int n){
        if(m==0)
            return n;
        if(n==0)
            return m;
 // If last characters of two strings are same, Ignore last characters     
        if(s.charAt(m-1)==t.charAt(n-1))        
                return f(s,t,m-1,n-1);     
 // 1.1st for insert 2.2nd function for removing 3. 3rd function ror replacing                                      
        return 1+Math.min(f(s,t,m,n-1), Math.min(f(s,t,m-1,n),f(s,t,m-1,n-1)));
      
    }                                                                                                                      
}




