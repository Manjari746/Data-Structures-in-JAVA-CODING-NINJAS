// using recursion
public static int maxMoneyLooted(int[] a) {
int n = houses.length;
    return f(houses,n-1);
	}

    public static int f(int arr[], int endIndex) {
        if (endIndex < 0)
            return 0;

        int ans1 = f(arr, endIndex - 1);
        int ans2 = f(arr, endIndex - 2) + arr[endIndex];

        return  Math.max(ans1, ans2);

    }
}


// using dp

 public static int maxMoneyLooted(int[] a) {
        int n = a.length;

        if (n == 0)
            return 0;

        if (n == 1)
            return a[0];

       
        int dp[] = new int[n];

        dp[0] = a[0];
        dp[1] = Math.max(a[0], a[1]);

        for (int i = 2; i < n; i++)
            dp[i] = Math.max(dp[i - 2] + a[i], dp[i - 1]);

        return dp[n-1];
    }
}
