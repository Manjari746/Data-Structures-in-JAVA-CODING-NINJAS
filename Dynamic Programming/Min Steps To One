// using recursion

	public static int countMinStepsToOne(int n) {
        // base case
        if(n==1)
            return 0;
        
        int f1,f2=Integer.MAX_VALUE,f3=Integer.MAX_VALUE;
        
       f1=countMinStepsToOne(n-1);
        if(n%2==0)
             f2=countMinStepsToOne(n/2);
        if(n%3==0)
          f3=countMinStepsToOne(n/3);
         
        return 1+Math.min(f1,Math.min(f2,f3));
	}

// memoization =recursion +storing



    public static int countMinStepsToOne(int n) {
        int dp[] = new int[n + 1];
        for(int i=0;i<=n;i++)
        dp[i]=-1;
return countMinStepsToOne(n,dp);
}
public static int countMinStepsToOne(int n, int dp[]){

        if(n==1)
        return 0;
       
      
            int ans1;
             

            if(dp[n-1]==-1){
                ans1=countMinStepsToOne(n-1,dp);
                dp[n-1]=ans1;
            }
            else
            ans1=dp[n-1];

int ans2 = Integer.MAX_VALUE;
if(n%2==0){
    if(dp[n/2]==-1){
        ans2=countMinStepsToOne(n/2,dp);
        dp[n/2]=ans2;
    }
    else
    ans2=dp[n/2];
}
int ans3 = Integer.MAX_VALUE;
if(n%3==0){
    if(dp[n/3]==-1){
        ans3=countMinStepsToOne(n/3,dp);
        dp[n/3]=ans3;
    }
    else
    ans3=dp[n/3];
}



           return 1+Math.min(ans1,Math.min(ans2,ans3));

}
}















// using dp = first fill base case then use recurence reletion for ith index and fill dp



 public static int countMinStepsToOne(int n) {
        int dp[] = new int[n + 1];
        dp[0] = 0;
        dp[1] = 0;

        for (int i = 2; i <= n; i++) {
            int ans1,ans2 = Integer.MAX_VALUE, ans3 = Integer.MAX_VALUE;

            ans1=dp[i-1];
            if(i%2==0)
            ans2=dp[i/2];
            if(i%3==0)
            ans3=dp[i/3];

            dp[i]=1+Math.min(ans1,Math.min(ans2,ans3));

        }
