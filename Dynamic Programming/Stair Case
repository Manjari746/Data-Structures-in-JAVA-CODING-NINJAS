// recursion

public static long staircase(int n){
   if(n==0)  // on staying on ground 
		return 1;
		if(n==1||n==2)
		return n;
    
    return staircase(n-1)+staircase(n-2)+staircase(n-3);
    }
    
    
    // using memoization ==recursion +storing
    
    public static long staircase(int n , int dp[]){
    
     public static long staircase(int n) {
		long dp[] = new long[n + 1];
		return staircase(n,dp);}

		public static long staircase(int n, long dp[]){
		if(n==0)
		return 1;
		if(n==1||n==2)
		return n;
	

long ans1,ans2,ans3;
if(dp[n-1]==0){
	ans1=staircase(n-1,dp);
	dp[n-1]=ans1;
}
else
ans1=dp[n-1];

if (dp[n - 2] == 0) {
ans2= staircase(n - 2, dp);
dp[n - 2] = ans2;
} else
ans2 = dp[n - 2];

if (dp[n -3] == 0) {
ans3 = staircase(n - 3, dp);
dp[n - 3] = ans3;
} else
ans3 = dp[n - 3];

return ans1+ans2+ans3;
	}
  
  // using iteration programming // first fill base case then use recurence reletion of ith index to fill dp array

	public static long staircase(int n) {
		
		if(n==0)
		return 1;
		if(n==1||n==2)
		return n;
	long dp[] = new long[n + 1];

		dp[0]=1;
		dp[1]=1;
		dp[2]=2;

for(int i=3;i<=n;i++){
	dp[i]=dp[i-1]+dp[i-2]+dp[i-3];
}
return dp[n];

	}


  
  
  
  
  
  
  
  
  
    
