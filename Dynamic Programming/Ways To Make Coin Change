//using dp

public static int countWaysToMakeChange(int denominations[], int value){
int n=denominations.length;
         int[][] dp = new int[n+1][value+1];
         
            for (int[] row : dp)
                Arrays.fill(row, -1);
        return f(denominations,value,n,dp);
        
	}
    
    static int f(int a[], int sum, int n , int dp[][]){
         if (sum == 0)
            return 1;
        if(sum<0)
            return 0;
        
        if (n<=0)
            return 0;
        
         if (dp[n][sum] != -1)
            return dp[n][sum];
        
       
       return dp[n][sum] = f(a,sum-a[n-1], n, dp) + f(a,sum,n-1,dp);  
            
    }
}


// using recursion


public static int countWaysToMakeChange(int denominations[], int value){
       int n=denominations.length;
 
        return f(denominations,value,n);
        
	}
    
    
    static int f(int coins[], int sum, int n){
  
        // If sum is 0 then there is 1 solution  (do not include any coin)
       
        if (sum == 0)
            return 1;
  
        // If sum is less than 0 then no   solution exists
       
        if (sum < 0 )
            return 0;
  
        // If there are no coins and sum  is greater than 0, then no solution exist
  
       
        if (n <= 0)
            return 0;
  
        // count is sum of solutions (i) including coins[n-1] (ii) excluding coins[n-1]
     
        return  f(coins,sum,n-1) +f(coins, sum-coins[n-1],n);
    }
	
}




















