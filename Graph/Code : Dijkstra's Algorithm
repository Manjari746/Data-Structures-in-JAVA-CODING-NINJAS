import java.util.Scanner;

public class Solution {

	public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		int v = s.nextInt();
		int e = s.nextInt();

		 int adjacencyMatrix[][] = new int[v][v]; // adjaceny Matrix of v*V edges
        //taking Input for the graph
        //start from 0 to number of edges, not vertices
		for(int i = 0; i < e; i++){ 
			int v1 = s.nextInt();
			int v2 = s.nextInt();
			int weight = s.nextInt();
			adjacencyMatrix[v1][v2] = weight; //this applies only in case of undirected graphs
			adjacencyMatrix[v2][v1] = weight;
		}
		dijkstra(adjacencyMatrix);

     
	}
    
    
    
    
    private static void dijkstra(int[][] adjacencyMatrix) {
		int v = adjacencyMatrix.length;
		boolean visited[] = new boolean[v];
		int distance[] = new int[v];
		distance[0] = 0; //here we assume the first node to be the source
		for(int i = 1; i < v; i++){
			distance[i] = Integer.MAX_VALUE; //initilize all nodes distance to infinty
		}
		
		for(int i = 0; i < v - 1; i++){
			// Find Vertex with Min distance
			int minVertex = findMinVertex(distance, visited);
			visited[minVertex] = true;
			// Explore neighbors
			for(int j = 0; j < v; j++){
                //here we take those nodes which are adjacent/neighbours and whcih are mot visisted
				if(adjacencyMatrix[minVertex][j] != 0 && !visited[j] && distance[minVertex] != Integer.MAX_VALUE){
					int newDist = distance[minVertex] + adjacencyMatrix[minVertex][j];
                    //if new distance is less, update it.
					if(newDist < distance[j]){
						distance[j] = newDist;
					}
				}
			}
		}
		
		// Print the shirtest dustance of all nodes from souce that is 0 in this case.
		for(int i = 0; i < v; i++){
			System.out.println(i + " "+ distance[i]);
		}
		
	} 
    
    private static int findMinVertex(int[] distance, boolean visited[]) {
		
		int minVertex = -1;
		for(int i = 0; i < distance.length; i++){
            //in case of || if minVertex == -1 is true it wont go the 2nd case in case of Or
			if(!visited[i]  && (minVertex == -1 || distance[i] < distance[minVertex])){
				minVertex = i;
			}
		}
		return minVertex;
	}
    
    
}
