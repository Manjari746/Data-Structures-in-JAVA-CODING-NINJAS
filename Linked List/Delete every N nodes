/*

    Following is the Node class already written for the Linked List

    class LinkedListNode<T> {
        T data;
        LinkedListNode<T> next;
    
        public LinkedListNode(T data) {
            this.data = data;
        }
    }

*/



public class Solution {
	
	public static LinkedListNode<Integer> skipMdeleteN(LinkedListNode<Integer> head, int M, int N) {
		 if(head==null||N==0)
            return head;
        if(M==0 && N!=0)
            return null;
       
        LinkedListNode<Integer> curr=head,t;
        int count;
        while(curr!=null)
        {
        for(count=1;count<M && curr!=null;count++)
            curr=curr.next;
       
        if(curr==null)
            return head;
        t=curr.next;
        for(count=1;count<=N && t!=null;count++)
            t=t.next;
      
        curr.next=t;
        curr=t;
        }
        return head;

	}
}

// using recursion
/* if(M ==0)
            return null;

if(head==null)
return head;

        LinkedListNode<Integer> t1 = head;
        LinkedListNode<Integer> t2=null;
        LinkedListNode<Integer> t3=null;
// skipping m nodes
 for(int i=0;t1!=null && i<M;i++){
     t2=t1;
     t1=t1.next;
 }

// deleting n nodes
for(int i=0;t1!=null && i<N;i++){
     t3=t1.next;
     t1=t3;
 }

t2.next=t1;
skipMdeleteN(t1,  M,  N);
return head;
*/
