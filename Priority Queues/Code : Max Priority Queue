import java.util.*;
public class PQ {
	 private ArrayList<Integer> heap;
    
    // constructor
    public PQ() {
        heap = new ArrayList<>();
    }
	boolean isEmpty() {
		return heap.isEmpty();
	}

	 int getSize() {
		return heap.size(); 
     }
	int getMax() {
		 if (heap.isEmpty()) 
            return Integer.MIN_VALUE;
         else 
            return heap.get(0); 
        
	}

	void insert(int element) {
		  heap.add(element);
        upHeapify();

	}

	int removeMax() {
		  if (isEmpty()) 
            return Integer.MIN_VALUE;
        

        int maxElement = heap.get(0); 
        heap.set(0, heap.get(heap.size() - 1)); 
        heap.remove(heap.size() - 1); 
        downHeapify();
        return maxElement; 
	}
      private void upHeapify() {
        int childIndex = heap.size() - 1; 
        while (childIndex > 0) {
            int parentIndex = (childIndex - 1) / 2;
            if (heap.get(childIndex) > (heap.get(parentIndex))) {
                int temp = heap.get(childIndex);
                heap.set(childIndex, heap.get(parentIndex)); 
                heap.set(parentIndex, temp);
                childIndex = parentIndex;
            } else 
                return; 
                    }}
    
     private void downHeapify() {
        int parentIndex = 0;
        int leftChildIndex = 2 * parentIndex + 1;
        int rightChildIndex = 2 * parentIndex + 2;
        int maxIndex = 0;
        
        while (leftChildIndex < heap.size()) {
            if (heap.get(leftChildIndex) > heap.get(maxIndex)) 
                maxIndex = leftChildIndex;
            
           
            if (rightChildIndex < heap.size() && heap.get(rightChildIndex) > heap.get(maxIndex)) 
                maxIndex = rightChildIndex;                                   
            
            if (maxIndex != parentIndex) {
                int temp = heap.get(maxIndex);
                heap.set(maxIndex, heap.get(parentIndex));
                heap.set(parentIndex, temp);
                parentIndex = maxIndex; 
                leftChildIndex = 2 * parentIndex + 1;
                rightChildIndex = 2 * parentIndex + 2;
            } else     
               return;
        } }
    
    
}
