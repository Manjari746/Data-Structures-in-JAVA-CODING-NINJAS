/******************
 * Following is the main function we are using internally.
 * Refer this for completing the Dequeue class
 *
 
  public static void main(String[] args) {
		Scanner s = new Scanner(System.in);

		Dequeue dq = new Dequeue(10);

		while(true){
			int choice = s.nextInt(),input;
			switch (choice) {
			case 1:
				input = s.nextInt();
				dq.insertFront(input);
				break;
			case 2:
				input = s.nextInt();
				dq.insertRear(input);
				break;
			case 3:
				dq.deleteFront();
				break;
			case 4:
				dq.deleteRear();
				break;
			case 5:
				System.out.println(dq.getFront());
				break;
			case 6:
				System.out.println(dq.getRear());
				break;
			default:
				return ;
			}  
		}
	} 
 ******************/

public class Dequeue {
   

	    int  arr[]; 
	    int  front; 
	    int  rear; 
	    int  size; 

	    
	    // constructor
	    public Dequeue(int size){ 
	        arr = new int[size]; 
	        front = -1; 
	        rear = 0; 
	        this.size = size; 
	    } 
	    
	 // Checks whether Dequeue is full or not. 
	    boolean isFull() 
	    { 
	        return ((front == 0 && rear == size-1) ||  front == rear+1); 
	    } 
	    // Checks whether Dequeue is empty or not. 
	    boolean isEmpty () 
	    { 
	        return front == -1; 
	    } 
	 // Inserts an element at front 
	    void insertFront(int key) 
	    { 
	        // check whether Dequeue if  full or not 
	        if (isFull()) 
	        { 
	            System.out.println("-1");  
	            return; 
	        } 
	   
	        // If queue is initially empty 
	        if (front == -1) 
	        { 
	            front = 0; 
	            rear = 0; 
	        } 
	          
	        // front is at first position of queue 
	        else if (front == 0) 
	            front = size - 1 ; 
	   
	        else // decrement front end by '1' 
	            front = front-1; 
	   
	        // insert current element into Dequeue 
	        arr[front] = key ; 
	    } 
	 // function to insert element at rear end 
	    // of Dequeue. 
	    void insertRear(int key) 
	    { 
	        if (isFull()) 
	        { 
	            System.out.println("-1"); 
	            return; 
	        } 
	   
	        // If queue is initially empty 
	        if (front == -1) 
	        { 
	            front = 0; 
	            rear = 0; 
	        } 
	   
	        // rear is at last position of queue 
	        else if (rear == size-1) 
	            rear = 0; 
	   
	        // increment rear end by '1' 
	        else
	            rear = rear+1; 
	          
	        // insert current element into Dequeue
	        arr[rear] = key ; 
	    } 
	    
	 // Deletes element at front end of Dequeue 
	    void deleteFront() 
	    { 
	        // check whether Dequeue is empty or not 
	        if (isEmpty()) 
	        { 
	            System.out.println("-1"); 
	            return ; 
	        } 
	   
	        // Dequeue has only one element 
	        if (front == rear) 
	        { 
	            front = -1; 
	            rear = -1; 
	        } 
	        else
	            // back to initial position 
	            if (front == size -1) 
	                front = 0; 
	   
	            else // increment front by '1' to remove current 
	                // front value from Dequeue 
	                front = front+1; 
	    } 
	   
	    // Delete element at rear end of Dequeue
	    void deleteRear() 
	    { 
	        if (isEmpty()) 
	        { 
	            System.out.println("-1"); 
	            return ; 
	        } 
	   
	        // Dequeue has only one element 
	        if (front == rear) 
	        { 
	            front = -1; 
	            rear = -1; 
	        } 
	        else if (rear == 0) 
	            rear = size-1; 
	        else
	            rear = rear-1; 
	    } 
	    
	 // Returns front element of Dequeue 
	    int getFront() 
	    { 
	        // check whether Dequeue is empty or not 
	        if (isEmpty()) 
	        { 
	            return -1 ; 
	        } 
	        return arr[front]; 
	    } 
	   
	    // function return rear element of Dequeue 
	    int getRear() 
	    { 
	        // check whether Deque is empty or not 
	        if(isEmpty() || rear < 0) 
	        { 
	            return -1 ; 
	        } 
	        return arr[rear]; 
	    }
    
}
