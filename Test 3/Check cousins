import java.util.ArrayList;


public class solution {

	/*	Binary Tree Node class
	 * 
	 * class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
		}
	}
	 */

	public static boolean isCousin(BinaryTreeNode<Integer> root, int p, int q) {
		return !isSiblings(root, p, q) && depth(root, 0, p) == depth(root, 0, q);

	}
    public static boolean isSiblings(BinaryTreeNode<Integer> root,int p,int q) {

		if(root==null) 
			return false;

		else if(root.left!=null && root.right!=null && root.left.data == p && root.right.data == q) 
				return true;
			
		else
		return isSiblings(root.left, p, q) || isSiblings(root.right, p, q);
}
public static int depth(BinaryTreeNode<Integer> root,int k,int p) {

		if(root==null)
			return -1;
		if(root.data == p) {
			return k;
		}
		int left  = depth(root.left, k+1, p);
		int right = depth(root.right, k+1, p);
		if(left==-1) {
			return right;
		}
		if(right==-1) {
			return left;
		}
		
		return -1;
		
	}

}




