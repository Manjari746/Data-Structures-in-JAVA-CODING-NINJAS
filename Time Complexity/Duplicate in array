/*Approach 1:  Using XOR TC O(N)
operator, we can solve this problem in one traversal only. The following facts about XOR
operation will be useful for this question:
1. If we XOR a number by itself, even number of times then it will give you 0.
2. If we XOR a number with itself, odd number of times, then it will give you the number
itself.
3. Also XOR of a number with 0 gives you that number again.
So, if we take XOR of all the elements present in the array with every element in the range 0 to
n-2, then all the elements of that array except the duplicate element are XORed 2 times and hence, their resultant is 0. But the duplicate element is XORed 3 times, hence, its resultant is the
number itself. Hence, you will get you answer as the duplicate number present in the array.

For example, if you are given with n=5 and let us say array is 0 1 3 2 2, then according to this
approach, we have to XOR all elements present in the array with every element in the range 0 to
3.
Answer = (0^1^3^2^2)^(0^1^2^3)
As XOR operation is associative and commutative, so, by rearranging
Answer = (0^0) ^ (1^1) ^ (2^2^2) ^ (3^3)
 = 0 ^ 0 ^ 2 ^ 0
 = 2
*/

int n=arr.length;
int ans=0;

for(int i=0;i<n-1;i++){
  ans^=i^arr[i];
}

return ans^arr[n-1];

    }
}






/*Approach 2: Another approach is to make use of the condition that all elements lies between 0
and n-2. So first calculate the sum of all natural numbers between 0 to n-2 by using the direct
formula ((n - 1) * (n - 2)) / 2 and sum of all elements of the array. Now, subtract the sum of all
natural numbers between 0 to n-2 from sum of all elements of the array. This will give you the
duplicate element present in the array.
Time Complexity for this approach: Time complexity for this approach is O(n) as WE are
traversing the array only once to calculate the sum of all elements present in the array.
 Let us dry run the code for the N= 9
 arr[]= 0 7 2 5 4 7 1 3 6
Sum = 0+7+2+5+4+7+1+3+6 =35
sumOfNaturalNumbers=8*7/2=28
Output = 35-28 =7*/

public class Solution {
    
	public static int findDuplicate(int[] arr) {
		int sum=0;
        int n=arr.length;
    for(int i=0;i<n;i++)
    {
        sum+=arr[i];
    }
    int sumFormula=((n-2)*(n-1))/2;
 
    return sum-sumFormula;
    }
}



