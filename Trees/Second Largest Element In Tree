import java.util.*;

public class Solution {

/*	TreeNode structure 
 * 
 * class TreeNode<T> {
		T data;
		ArrayList<TreeNode<T>> children;

		TreeNode(T data){
			this.data = data;
			children = new ArrayList<TreeNode<T>>();
		}
	}*/
	
public static TreeNode<Integer> findNextSmallerNode(TreeNode<Integer> root, int max){	 
    int childCount = root.children.size();
        
    if(childCount==0 && root.data<max) 
          return root; 
    
    TreeNode<Integer> node = null;
        
    if(root.data<max)
    node=root;
        
    for(int i=0; i<childCount; i++){
        TreeNode<Integer> temp = findNextSmallerNode(root.children.get(i), max);
         if(temp==null)
            continue;
        if(node==null || node.data<temp.data)
            node = temp;
    }
    return node;
}
    
    public static int max(TreeNode<Integer> root){
        int max=Integer.MIN_VALUE;
        for(int i=0;i<root.children.size();i++){
            int childmax=max(root.children.get(i));
            max=Math.max(childmax,max);
        }
        return Math.max(root.data,max);
    }
    
	
	public static TreeNode<Integer> findSecondLargest(TreeNode<Integer> root){
        int max=max(root);
        TreeNode<Integer> second_largest=findNextSmallerNode(root,max);
        return second_largest;
        
        

	}
	
	
}



// using pair class



class Helper {
	TreeNode<Integer> max;
	TreeNode<Integer> secondMax;
	
	public Helper(TreeNode<Integer> max, TreeNode<Integer> secondMax) {
		this.max = max;
		this.secondMax = secondMax;
	}
}

public class Solution {

/*	TreeNode structure 
 * 
 * class TreeNode<T> {
		T data;
		ArrayList<TreeNode<T>> children;

		TreeNode(T data){
			this.data = data;
			children = new ArrayList<TreeNode<T>>();
		}
	}*/
	
		
	public static Helper help(TreeNode<Integer> root) {
		if(root == null) {
			Helper ans = new Helper(null,null);
			return ans;
		}
		
		Helper ans = new Helper(root,null);
		for(int i = 0; i < root.children.size(); i++) {
			Helper child = help(root.children.get(i));
			if(child.max.data > ans.max.data) {
				if(child.secondMax == null || child.secondMax.data<ans.max.data) {
					ans.secondMax = ans.max;
					ans.max = child.max;
				}
				else {
					ans.max=child.max;
					ans.secondMax=child.secondMax;
					}
				}
			
else if(child.max.data==ans.max.data && child.secondMax!=null){
	if(ans.secondMax==null || child.secondMax.data>ans.secondMax.data){
		ans.secondMax=child.secondMax;
	}
}


			else {
				if(ans.max.data != child.max.data && (ans.secondMax == null || child.max.data > ans.secondMax.data)) {
					ans.secondMax = child.max;
				}
			}
		}
		return ans;
		
	}


	public static TreeNode<Integer> findSecondLargest(TreeNode<Integer> root){
		if (root == null) return null;
		Helper ans = help(root);
		return ans.secondMax;

		// Write your code here

	}
	
	
}






